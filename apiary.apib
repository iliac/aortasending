FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# AORTA Message Broker Sending Messages

Aorta Rest is a simple API allowing tasks to be routed and medical messages to be transferred.

List of services that will be called on remote applications:

 - Process Request - Task Management Application
   - Create a Process Request           POST   http://server:port/api/processrequests/aeb7d11b-5588-4de7-822e-bd4a94da4df7
   - Delete a Process Request           DELETE http://server:port/api/processrequests/aeb7d11b-5588-4de7-822e-bd4a94da4df7
   - Update a Process Request           PUT    http://server:port/api/processrequests/aeb7d11b-5588-4de7-822e-bd4a94da4df7

 - Tasks - Dynamic Scheduling Application
   - Create a Task                      POST   http://server:port/api/tasks/aeb7d11b-5588-4de7-822e-bd4a94da4df7
   - Delete a Task                      DELETE http://server:port/api/tasks/aeb7d11b-5588-4de7-822e-bd4a94da4df7
   - Update a Task                      PUT    http://server:port/api/tasks/aeb7d11b-5588-4de7-822e-bd4a94da4df7

 - Patient Admissions - Epd Application
   - Create an Admission                POST  http://server:port/api/patients/123456/admissions
   - Update an Admission                PUT   http://server:port/api/patients/123456/admissions/456789

 - Patient Transfers - Epd Application
   - Create a Transfer                  POST  http://server:port/api/patients/123456/transfers
   - Cancel a Transfer                  PUT   http://server:port/api/patients/123456/transfers/789123

 - Hospital Structure - Epd Application
    - Update a Hospital Structure       PUT    http://server:port/api/structure

 - Stock - Epr Application
    - Create a Stock Movement Request   POST   http://server:port/api/stocks
    - Update a Stock Movement Request   PUT    http://server:port/api/stocks/456123
 
 - Appointment - Epd Application
   - Create an Appointment              POST   http://server:port/api/patients/123456/appointments
   - Delete an Appointment              DELETE http://server:port/api/patients/123456/appointments/789123
   - Update an Appointment              PUT    http://server:port/api/patients/123456/appointments/789123

## Process Requests Collection [/api/processrequests]

The collection of messages that deals with Process Requests.
Process Requests are used as input to create one or multiple tasks.

**POST requests**
 - First POST request: This message creates a process request.

**POST responses**
 - First POST response: HTTP 1/1 200 OK or any other HTTP Status Code 2xx. AortaMessageBroker will consider the message correctly treated and move to the next message.
 - Second POST response: HTTP 1/1 400 Bad Request, with specific body (see below). AortaMessageBroker will then discard the message from the FIFO to that receiver.
 - All other POST responses: AortaMessagebroker will keep repeating the same message (with configurable interval).

**DELETE requests**
 - First DELETE request: This message deletes a process request.

**PUT requests**
 - First PUT request: This message updates a process request.

### Create a Process Request [POST]

+ Request (application/json)

    + Body
    
            {
                "processId": "aeb7d11b-5588-4de7-822e-bd4a94da4df7",
                "type": "ProcessRequest",
                "description": "Pick up Patient X",
                "taskState": "Requested",
                "creationTime": "2016-03-10T12:34:56.123Z",
                "creator": "Task Manager",
                "taskType": "PatientTransport",
                "priority": "Normal",
                "transportMode": "Rolstoel",
                "transportType": "Terug",
                "processLinks": [{
                    "nextProcessId": "7278b5d1-afb8-4f4b-8141-615dd283c5d4"
                }],
                "personObjects": [{
                    "personId": "24a87862-0e8d-4e5e-8740-da1c818d843f",
                    "identificationMethods": [
                        { "identificationMethod": "OazisPatientId", "identificationKey": "12345678" },
                        { "identificationMethod": "NFC", "identificationKey": "fabdfa2b-16e8-455b-8b60-6b2ea5bffbde" }
                    ],
                    "firstName": "Goedele",
                    "lastName": "Bruynooghe",
                    "birthDate": "1961-05-21",
                    "gender": "V",
                    "location": {
                        "locationId": "2.W01.15a",
                        "name": "The red one",
                        "description": "Wachtruimte NKO"
                    },
                    "roles": ["Patient"]
                }],
                "proposedArrivalTime": "2016-03-11T13:30:00.000Z",
                "proposedArrivalTimeWindow": {
                    "timeWindowStart": "2016-03-11T13:30:00.000Z",
                    "timeWindowEnd": "2016-03-11T13:50:00.000Z"
                },
                "startLocation": {
                    "locationId": "2.W01.15a",
                    "description": "The red one",
                    "name": "Wachtruimte NKO"
                },
                "endLocation": {
                    "locationId": "1.W01.17a",
                    "description": "The blue one",
                    "name": "ReceptionBooth1"
                },
                "tasks": [{
                    "taskId": "76f8f381-4dd6-4e1d-a591-8a4d49ac0bce"
                }]
            }
            
    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",

                "definitions": {
                    "type": {
                        "type": "string",
                        "enum": [ "ProcessRequest", "Task", "Action" ]
                    },
                    "guidId": {
                        "type": "string",
                        "pattern": "[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}"
                    },
                    "millisecondTimestampZ": {
                        "type": "string",
                        "pattern": "[12][0-9]{3}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9].[0-9]{3}Z"
                    },
                    "yearsToSecondsDuration": {
                        "type": "string",
                        "pattern": "P((([0-9]*.?[0-9]*)Y)?(([0-9]*.?[0-9]*)M)?(([0-9]*.?[0-9]*)W)?(([0-9]*.?[0-9]*)D)?)?(T(([0-9]*.?[0-9]*)H)?(([0-9]*.?[0-9]*)M)?(([0-9]*.?[0-9]*)S)?)?"
                    },
                    "millisecondTimeWindowZ": {
                        "type": "object",
                        "properties": {
                            "timeWindowStart": { "ref": "#/definitions/millisecondTimestampZ" },
                            "timeWindowEnd": { "ref": "#/definitions/millisecondTimestampZ" }
                        }
                    },
                    "dateOnly": {
                        "type": "string",
                        "pattern": "[12][0-9]{3}-[01][0-9]-[0-3][0-9]"
                    },
                    "gender": {
                        "type": "string",
                        "enum": [ "M", "V", "F", "O", "U" ]
                    },
                    "coordinates": {
                        "type": "string",
                        "pattern": "[0-9].[a-zA-Z]?[a-zA-Z][0-9][0-9].[0-9][0-9][a-z]?"
                    },
                    "location": {
                        "type": "object",
                        "properties": {
                            "locationId": { "$ref": "#/definitions/coordinates" },
                            "name": { "type": "string" },
                            "description": { "type": "string" },
                            "coordinates": { "type": "string" }
                        },
                        "required": ["locationId"]
                    },
                    "creator": {
                        "type": "string",
                        "enum": [ "Aorta Message Broker", "Task Manager", "Notification Engine", "Context Engine", "Scheduling Application", "Wearable" ]
                    },
                    "taskState": {
                        "type": "string",
                        "enum": [ "Requested", "ToSchedule", "Scheduled", "Assigned", "Notified", "Accepted", "InProgress", "Refused", "Timeout", "Unreachable", "Interrupted", "Delayed", "Finished", "Cancelled" ]
                    },
                    "priority": {
                        "type": "string",
                        "enum": [ "Urgent", "High", "Normal", "Low" ]
                    },
                    "taskType": {
                        "type": "string",
                        "enum": [ "PatientTransport", "GoodsTransport" ]
                    },
                    "taskMode": {
                        "type": "string",
                        "enum": ["Afroep", "Herhalend"]
                    },
                    "transportType": {
                        "type": "string",
                        "enum": ["Enkel", "Heen", "Terug"]
                    },
                    "transportMode": {
                        "type": "string",
                        "enum": ["TeVoet", "Rolstoel", "Bed"]
                    },
                    "role": {
                        "type": "string",
                        "enum": [ "Nurse", "Doctor", "Patient", "Technician", "Logistics", "Administrative" ]
                    },
                    "identificationMethod": {
                        "type": "object",
                        "properties": {
                            "identificationMethod": { "type": "string", "enum": [ "OazisPatientId", "NFC" ] },
                            "identificationKey": { "type": "string" }
                        },
                        "required": [ "identificationMethod", "identificationKey" ]
                    },
                    "person": {
                        "type": "object",
                        "properties": {
                            "personId": { "$ref": "#/definitions/guidId" },
                            "firstName": { "type": "string" },
                            "lastName": { "type": "string" },
                            "birthDate": { "$ref": "#/definitions/dateOnly" },
                            "gender": { "$ref": "#/definitions/gender" },
                            "identificationMethods": { "type": "array", "items": {"$ref": "#/definitions/identificationMethod"} },
                            "location": { "$ref": "#/definitions/location" },
                            "roles": { "type": "array", "items": { "$ref": "#/definitions/role" } },
                            "competences": { "type": "array", "items": { "$ref": "#/definitions/competence" } },
                            "isActive": { "type": "boolean" },
                            "actionOptions": {}
                        },
                        "anyOf" : [
                            { "required" : [ "personId", "firstName", "lastName", "birthDate", "gender" ] },
                            { "required" : [ "personId", "identificationMethods" ] }
                        ]
                    },
                    "processLinks": {
                        "type": "object",
                        "properties": {
                            "nextProcessId": { "$ref": "#/definitions/guidId" },
                            "previousProcessId": { "$ref": "#/definitions/guidId" },
                            "requiredPreviousProcessState": { "$ref": "#/definitions/taskState" }
                        },
                        "anyOf" : [
                            { "required" : [ "nextProcessId" ] },
                            { "required" : [ "previousProcessId" ] }
                        ]
                    },
                    "preconditionState": {
                        "type": "string",
                        "enum": [ "Todo", "Done", "Achieved" ]
                    },
                    "precondition": {
                        "type": "object",
                        "properties": {
                            "preconditionId": { "$ref": "#/definitions/guidId" },
                            "description": { "type": "string" },
                            "preconditionState": { "$ref": "#/definitions/preconditionState" }
                        },
                        "required" : [ "preconditionId" ]
                    },
                    "task": {
                        "type": "object",
                        "properties": {
                            "taskId": { "$ref": "#/definitions/guidId" }
                        }
                    }
                },

                "type": "object",
                "required": [ "processId", "type", "taskState", "taskType" ],
                "properties": {
                    "processId": { "$ref": "#/definitions/guidId" },
                    "type": { "$ref": "#/definitions/type" },
                    "description": { "type": "string" },
                    "taskState": { "$ref": "#/definitions/taskState"},
                    "creationTime": { "$ref": "#/definitions/millisecondTimestampZ" },
                    "creator": { "$ref": "#/definitions/creator" },
                    "taskType": { "$ref": "#/definitions/taskType" },
                    "priority": { "$ref": "#/definitions/priority"},
                    "taskMode": { "$ref": "#/definitions/taskMode"},
                    "taskCanStart": { "type": "boolean" },
                    "transportMode": { "$ref": "#/definitions/transportMode" },
                    "transportType": { "$ref": "#/definitions/transportType" },
                    "processLinks": { "type": "array", "items": {"$ref": "#/definitions/processLinks"} },
                    "personObjects": { "type": "array", "items": {"$ref": "#/definitions/person"} },
                    "proposedDepartureTime": { "$ref": "#/definitions/millisecondTimestampZ" },
                    "proposedDepartureTimeWindow": { "$ref": "#/definitions/millisecondTimeWindowZ" },
                    "proposedArrivalTime": { "$ref": "#/definitions/millisecondTimestampZ" },
                    "proposedArrivalTimeWindow": { "$ref": "#/definitions/millisecondTimeWindowZ" },
                    "proposedRecurringInterval": { "$ref": "#/definitions/yearsToSecondsDuration" },
                    "startLocation": { "$ref": "#/definitions/location" },
                    "endLocation": { "$ref": "#/definitions/location" },
                    "responseDeadline": { "$ref": "#/definitions/millisecondTimestampZ" },
                    "preconditions": { "type": "array", "items": {"$ref": "#/definitions/precondition"} },
                    "tasks": { "type": "array", "items": {"$ref": "#/definitions/task"} }
                }
            }

+ Response 200 (application/json)

+ Response 400 (application/json)

    + Body
    
            {
                "AortaMessageBrokerOutputResponse": "Rejected"
            }

### Delete a Process Request [DELETE]

+ Response 200 (application/json)

+ Response 400 (application/json)

    + Body
        
            {
                "AortaMessageBrokerOutputResponse": "Rejected"
            }

### Update a Process Request [PUT]

+ Response 200 (application/json)

+ Response 400 (application/json)

    + Body
    
            {
                "AortaMessageBrokerOutputResponse": "Rejected"
            }

## Tasks Collection [/api/tasks/:taskId]

The collection of messages that deals with Tasks.
Tasks contain actions that need to be performed by a person.

**POST requests**
 - First POST request: This message creates a task.

**POST responses**
 - First POST response: HTTP 1/1 200 OK or any other HTTP Status Code 2xx. AortaMessageBroker will consider the message correctly treated and move to the next message.
 - Second POST response: HTTP 1/1 400 Bad Request, with specific body (see below). AortaMessageBroker will then discard the message from the FIFO to that receiver.
 - All other POST responses: AortaMessagebroker will keep repeating the same message (with configurable interval).

**DELETE requests**
 - First DELETE request: This message deletes a task.

**PUT requests**
 - First PUT request: This message updates a task.

### Create a Task [POST]

+ Request (application/json)

    + Body

            {
                "taskId": "a6baa2d8-03c8-4743-8f9a-ba633ba0d0e6",
                "processId": "aeb7d11b-5588-4de7-822e-bd4a94da4df7",
                "type": "Task",
                "description": "Pickup Rita",
                "taskState": "InProgress",
                "creationTime": "2016-05-25T15:11:32.366Z",
                "creator": "Scheduling Application",
                "taskType": "PatientTransport",
                "priority": "Normal",
                "subject": {
                    "personId": "52a39c42-3e69-4940-a348-49bd93790eda",
                    "identificationMethods": [{
                            "identificationMethodId" : "24a87862-0e8d-4e5e-8740-da1c818d843d",
                            "type": "NFC",
                            "value":"1234"
                            }],
                    "firstName": "Jan",
                    "lastName": "Janssens",
                    "birthDate": "2016-05-25T00:00:00.000Z",
                    "location": {
                        "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                        "description": "The blue one",
                        "name": "ReceptionBooth1",
                        "coordinates": "x;y;z"
                    },
                    "roles": ["Nurse"],
                    "devices": [{
                        "deviceId": "a0d56ed4-b6f5-4059-8385-939ea26b0f96",
                        "description": "Samsung Gear S2",
                        "location": {
                            "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                            "description": "The blue one",
                            "name": "ReceptionBooth1",
                            "coordinates": "x;y;z"
                        },
                        "deviceType": "Smart watch",
                        "identificationMethods": [{
                            "identificationMethodId" : "24a87862-0e8d-4e5e-8740-da1c818d843d",
                            "type": "NFC",
                            "value":"1234"
                            }]
                    }],
                    "competences": ["CareTransport", "LogisticTransport"],
                    "isActive": true
                },
                "personObjects": [{
                    "personId": "24a87862-0e8d-4e5e-8740-da1c818d843f",
                    "identificationMethods": [{
                            "identificationMethodId" : "24a87862-0e8d-4e5e-8740-da1c818d843d",
                            "type": "NFC",
                            "value":"1234"
                            }],
                    "firstName": "Person",
                    "lastName": "1",
                    "birthDate": "2016-05-25T00:00:00.000Z",
                    "location": {
                        "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                        "description": "The blue one",
                        "name": "ReceptionBooth1",
                        "coordinates": "x;y;z"
                    },
                    "roles": ["Nurse"],
                    "devices": [{
                        "deviceId": "a0d56ed4-b6f5-4059-8385-939ea26b0f96",
                        "description": "Samsung Gear S2",
                        "location": {
                            "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                            "description": "The blue one",
                            "name": "ReceptionBooth1",
                            "coordinates": "x;y;z"
                        },
                        "deviceType": "Smart watch",
                        "identificationMethods": [{
                            "identificationMethodId" : "24a87862-0e8d-4e5e-8740-da1c818d843d",
                            "type": "NFC",
                            "value":"1234"
                            }]
                    }],
                    "competences": ["CareTransport", "LogisticTransport"],
                    "isActive": true
                }],
                "itemObjects": [{
                    "itemId": "2e8d0baf-237d-4547-a473-b98fe15edc37",
                    "description": "Green Wheelchair",
                    "location": {
                        "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                        "description": "The blue one",
                        "name": "ReceptionBooth1",
                        "coordinates": "x;y;z"
                    },
                    "itemType": "Wheelchair",
                    "identificationMethods": [{
                            "identificationMethodId" : "24a87862-0e8d-4e5e-8740-da1c818d843d",
                            "type": "NFC",
                            "value":"1234"
                            }]
                }],
                "startLocation": {
                    "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                    "description": "The blue one",
                    "name": "ReceptionBooth1",
                    "coordinates": "x;y;z"
                },
                "endLocation": {
                    "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                    "description": "The blue one",
                    "name": "ReceptionBooth1",
                    "coordinates": "x;y;z"
                },
                "responseDeadline": "2016-05-25T15:11:32.375Z",
                "preconditions": [{
                    "preconditionId": "4732516b-90f7-4f4d-adaa-922d853feb2d",
                    "state": "Todo",
                    "description": "The patient needs oxygen"
                }, {
                    "preconditionId": "87e09b2f-c154-4310-a4f5-d3c676fb28be",
                    "state": "Done",
                    "description": "For this transport a wheelchair is needed"
                }],
                "actions": [{
                    "actionId": "9b8cd5c1-084c-4df0-a174-57bf54a718c0",
                    "subject": {
                        "personId": "4274d23a-de9f-43ba-a64e-107d1565a91e",
                        "identificationMethods": ["NFC"],
                        "firstName": "Nurse",
                        "lastName": "1",
                        "location": {
                            "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                            "description": "The blue one",
                            "name": "ReceptionBooth1",
                            "coordinates": "x;y;z"
                        },
                        "roles": ["Nurse"],
                        "devices": [{
                            "deviceId": "a0d56ed4-b6f5-4059-8385-939ea26b0f96",
                            "description": "Samsung Gear S2",
                            "location": {
                                "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                                "description": "The blue one",
                                "name": "ReceptionBooth1",
                                "coordinates": "x;y;z"
                            },
                            "deviceType": "Smart watch",
                            "identificationMethods": [{
                            "identificationMethodId" : "24a87862-0e8d-4e5e-8740-da1c818d843d",
                            "type": "NFC",
                            "value":"1234"
                            }]
                        }],
                        "competences": ["CareTransport", "LogisticTransport"],
                        "isActive": true
                    },
                    "actionType": "Pickup",
                    "personObjects": [{
                        "personId": "24a87862-0e8d-4e5e-8740-da1c818d843f",
                        "identificationMethods": [{
                            "identificationMethodId" : "24a87862-0e8d-4e5e-8740-da1c818d843d",
                            "type": "NFC",
                            "value":"1234"
                            }],
                        "firstName": "Person",
                        "lastName": "1",
                        "birthDate": "25/05/2016",
                        "location": {
                            "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                            "description": "The blue one",
                            "name": "ReceptionBooth1",
                            "coordinates": "x;y;z"
                        },
                        "actionOptions": {
                            "carrier": [{
                                "key": "bed"
                            }],
                            "warning": [{
                                    "key": "gloves",
                                    "text": "Voorzorgsmaatregelen: handschoenen"
                                }, {
                                    "key": "O2",
                                    "text": "niet vergeten: O2"
                            }]
                        },
                        "roles": ["Nurse"],
                        "devices": [{
                            "deviceId": "a0d56ed4-b6f5-4059-8385-939ea26b0f96",
                            "description": "Samsung Gear S2",
                            "location": {
                                "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                                "description": "The blue one",
                                "name": "ReceptionBooth1",
                                "coordinates": "x;y;z"
                            },
                            "deviceType": "Smart watch",
                            "identificationMethods": [{
                            "identificationMethodId" : "24a87862-0e8d-4e5e-8740-da1c818d843d",
                            "type": "NFC",
                            "value":"1234"
                            }]
                        }],
                        "competences": ["CareTransport", "LogisticTransport"],
                        "isActive": true
                    }],
                    "itemObjects": [{
                        "itemId": "2e8d0baf-237d-4547-a473-b98fe15edc37",
                        "description": "Green Wheelchair",
                        "location": {
                            "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                            "description": "The blue one",
                            "name": "ReceptionBooth1",
                            "coordinates": "x;y;z"
                        },
                        "actionOptions": {
                            "carrier": ["O2"],
                            "warning": []
                        },
                        "itemType": "Wheelchair",
                        "identificationMethods": [{
                            "identificationMethodId" : "24a87862-0e8d-4e5e-8740-da1c818d843d",
                            "type": "NFC",
                            "value":"1234"
                            }]
                    }],
                    "startLocation": {
                        "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                        "description": "The blue one",
                        "name": "ReceptionBooth1",
                        "coordinates": "x;y;z"
                    },
                    "endLocation": {
                        "locationId": "cf12ce64-3080-4306-b3eb-daf9da8ac373",
                        "description": "The blue one",
                        "name": "ReceptionBooth1",
                        "coordinates": "x;y;z"
                    },
                    "effectiveStartTime": "2016-05-25T15:11:32.382Z",
                    "effectiveEndTime": "2016-05-25T15:11:32.382Z",
                    "preconditions": [{
                        "preconditionId": "87e09b2f-c154-4310-a4f5-d3c676fb28be",
                        "state": "Achieved",
                        "description": "For this transport a wheelchair is needed"
                    }],
                    "state": "Busy",
                    "delayReason": "Patient not available",
                    "delayDuration": "30",
                    "description": "Pickup patient X",
                    "priority": "Urgent"
                }]
            }

    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",

                "definitions": {
                    "type": {
                        "type": "string",
                        "enum": [ "ProcessRequest", "Task", "Action" ]
                    },
                    "guidId": {
                        "type": "string",
                        "pattern": "[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}"
                    },
                    "millisecondTimestampZ": {
                        "type": "string",
                        "pattern": "[12][0-9]{3}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9].[0-9]{3}Z"
                    },
                    "yearsToSecondsDuration": {
                        "type": "string",
                        "pattern": "P((([0-9]*.?[0-9]*)Y)?(([0-9]*.?[0-9]*)M)?(([0-9]*.?[0-9]*)W)?(([0-9]*.?[0-9]*)D)?)?(T(([0-9]*.?[0-9]*)H)?(([0-9]*.?[0-9]*)M)?(([0-9]*.?[0-9]*)S)?)?"
                    },
                    "millisecondTimeWindowZ": {
                        "type": "object",
                        "properties": {
                            "timeWindowStart": { "ref": "#/definitions/millisecondTimestampZ" },
                            "timeWindowEnd": { "ref": "#/definitions/millisecondTimestampZ" }
                        }
                    },
                    "dateOnly": {
                        "type": "string",
                        "pattern": "[12][0-9]{3}-[01][0-9]-[0-3][0-9]"
                    },
                    "gender": {
                        "type": "string",
                        "enum": [ "M", "V", "F", "O", "U" ]
                    },
                    "coordinates": {
                        "type": "string",
                        "pattern": "[0-9].[a-zA-Z]?[a-zA-Z][0-9][0-9].[0-9][0-9][a-z]?"
                    },
                    "location": {
                        "type": "object",
                        "properties": {
                            "locationId": { "$ref": "#/definitions/coordinates" },
                            "name": { "type": "string" },
                            "description": { "type": "string" },
                            "coordinates": { "type": "string" }
                        },
                        "required": [ "locationId" ]
                    },
                    "creator": {
                        "type": "string",
                        "enum": [ "Aorta Message Broker", "Task Manager", "Notification Engine", "Context Engine", "Scheduling Application", "Wearable" ]
                    },
                    "taskState": {
                        "type": "string",
                        "enum": [ "Requested", "ToSchedule", "Scheduled", "Assigned", "Notified", "Accepted", "InProgress", "Refused", "Timeout", "Unreachable", "Interrupted", "Delayed", "Finished", "Cancelled" ]
                    },
                    "priority": {
                        "type": "string",
                        "enum": [ "Urgent", "High", "Normal", "Low" ]
                    },
                    "taskType": {
                        "type": "string",
                        "enum": [ "PatientTransport", "GoodsTransport" ]
                    },
                    "taskMode": {
                        "type": "string",
                        "enum": ["Afroep", "Herhalend"]
                    },
                    "transportType": {
                        "type": "string",
                        "enum": ["Enkel", "Heen", "Terug"]
                    },
                    "transportMode": {
                        "type": "string",
                        "enum": ["TeVoet", "Rolstoel", "Bed"]
                    },
                    "role": {
                        "type": "string",
                        "enum": [ "Nurse", "Doctor", "Patient", "Technician", "Logistics", "Administrative" ]
                    },
                    "identificationMethod": {
                        "type": "object",
                        "properties": {
                            "identificationMethodId": { "$ref": "#/definitions/guidId" },
                            "type": { "type": "string", "enum": [ "OazisPatientId", "NFC" ] },
                            "value": { "type": "string" }
                        },
                        "required": [ "identificationMethodId", "type" ]
                    },
                    "person": {
                        "type": "object",
                        "properties": {
                            "personId": { "$ref": "#/definitions/guidId" },
                            "firstName": { "type": "string" },
                            "lastName": { "type": "string" },
                            "birthDate": { "$ref": "#/definitions/millisecondTimestampZ" },
                            "gender": { "$ref": "#/definitions/gender" },
                            "identificationMethods": { "type": "array", "items": {"$ref": "#/definitions/identificationMethod"} },
                            "location": { "$ref": "#/definitions/location" },
                            "roles": { "type": "array", "items": { "$ref": "#/definitions/role" } },
                            "competences": { "type": "array", "items": { "$ref": "#/definitions/competence" } },
                            "isActive": { "type": "boolean" },
                            "actionOptions": {}
                        },
                        "anyOf" : [
                            { "required" : [ "personId", "firstName", "lastName", "birthDate", "gender" ] },
                            { "required" : [ "personId", "identificationMethods" ] }
                        ]
                    },
                    "processLinks": {
                        "type": "object",
                        "properties": {
                            "nextProcessId": { "$ref": "#/definitions/guidId" },
                            "previousProcessId": { "$ref": "#/definitions/guidId" },
                            "requiredPreviousProcessState": { "$ref": "#/definitions/taskState" }
                        },
                        "anyOf" : [
                            { "required" : [ "nextProcessId" ] },
                            { "required" : [ "previousProcessId" ] }
                        ]
                    },
                    "preconditionState": {
                        "type": "string",
                        "enum": [ "Todo", "Done", "Achieved" ]
                    },
                    "precondition": {
                        "type": "object",
                        "properties": {
                            "preconditionId": { "$ref": "#/definitions/guidId" },
                            "description": { "type": "string" },
                            "preconditionState": { "$ref": "#/definitions/preconditionState" }
                        },
                        "required" : [ "preconditionId" ]
                    },
                    "task": {
                        "type": "object",
                        "properties": {
                            "taskId": { "$ref": "#/definitions/guidId" }
                        }
                    },
                    "competence": {
                        "type": "string",
                        "enum": [ "CareTransport", "LogisticTransport" ]
                    },
                    "deviceType": {
                        "type": "string",
                        "enum": [ "Smart watch" ]
                    },
                    "device": {
                        "type": "object",
                        "properties": {
                            "deviceId": { "$ref": "#/definitions/guidId" },
                            "description": { "type": "string" },
                            "identificationMethods": { "type": "array", "items": {"$ref": "#/definitions/identificationMethod"} },
                            "location": { "$ref": "#/definitions/location" },
                            "deviceType": { "$ref": "#/definitions/deviceType" }
                        },
                        "required" : [ "deviceId", "identificationMethods" ]
                    },
                    "itemType": {
                        "type": "string",
                        "enum": [ "Wheelchair" ]
                    },
                    "item": {
                        "type": "object",
                        "properties": {
                            "itemId": { "$ref": "#/definitions/guidId" },
                            "description": { "type": "string" },
                            "identificationMethods": { "type": "array", "items": {"$ref": "#/definitions/identificationMethod"} },
                            "location": { "$ref": "#/definitions/location" },
                            "itemType": { "$ref": "#/definitions/itemType" }
                        },
                        "required" : [ "itemId", "identificationMethods" ]
                    },
                    "action": {
                        "type": "object",
                        "properties": {
                            "actionId": { "$ref": "#/definitions/guidId" }
                        }
                    }
                },

                "type": "object",
                "required": [ "taskId", "type", "processId", "taskState", "taskType" ],
                "properties": {
                    "taskId": { "$ref": "#/definitions/guidId" },
                    "processId": { "$ref": "#/definitions/guidId" },
                    "type": { "$ref": "#/definitions/type" },
                    "description": { "type": "string" },
                    "taskState": { "$ref": "#/definitions/taskState"},
                    "creationTime": { "$ref": "#/definitions/millisecondTimestampZ" },
                    "creator": { "$ref": "#/definitions/creator" },
                    "taskType": { "$ref": "#/definitions/taskType" },
                    "priority": { "$ref": "#/definitions/priority"},
                    "taskMode": { "$ref": "#/definitions/taskMode"},
                    "taskCanStart": { "type": "boolean" },
                    "subject": { "$ref": "#/definitions/person" },
                    "personObjects": { "type": "array", "items": {"$ref": "#/definitions/person"} },
                    "itemObjects": { "type": "array", "items": {"$ref": "#/definitions/item"} },
                    "startLocation": { "$ref": "#/definitions/location" },
                    "endLocation": { "$ref": "#/definitions/location" },
                    "responseDeadline": { "$ref": "#/definitions/millisecondTimestampZ" },
                    "preconditions": { "type": "array", "items": {"$ref": "#/definitions/precondition"} },
                    "actions": { "type": "array", "items": {"$ref": "#/definitions/action"} }
                }
            }
        
+ Response 200 (application/json)

+ Response 400 (application/json)

    + Body
    
            {
                "AortaMessageBrokerOutputResponse": "Rejected"
            }

### Delete a Task [DELETE]

+ Response 200 (application/json)

+ Response 400 (application/json)

    + Body
    
            {
                "AortaMessageBrokerOutputResponse": "Rejected"
            }

### Update a Task [PUT]

+ Response 200 (application/json)

+ Response 400 (application/json)

    + Body
    
            {
                "AortaMessageBrokerOutputResponse": "Rejected"
            }

## Patient Admissions Collection [/api/patients/123456/admissions]

Series of messages related to the admission and discharge of a patient.

**POST Requests**
 - First POST request: This message creates a (resident) admission for a given patient.
 - Second POST request: This message creates an (ambulant) admission for a given patient.
 - Third POST request: This message creates a Pending Admission (in the future). Remark that this is normally followed by a Create Admission at the moment of the patient arriving at the admission desk. The Pending Admission is then converted into a true Admission.

**POST responses**
 - First POST response: HTTP 1/1 200 OK or any other HTTP Status Code 2xx. AortaMessageBroker will consider the message correctly treated and move to the next message.
 - Second POST response: HTTP 1/1 400 Bad Request, with specific body (see below). AortaMessageBroker will then discard the message from the FIFO to that receiver.
 - All other POST responses: AortaMessagebroker will keep repeating the same message (with configurable interval).

**PUT Requests**
 - First PUT request: This message creates a Patient Discharge
 - Second PUT request: This message creates a Pending Discharge (in the future)
 - Third PUT request: This message cancels any Admission (remark that this is not a delete)
 - Fourth PUT request: This message cancels a Pending Admission (in the future)
 - Fifth PUT request: This message cancels a Patient Discharge
 - Sixth PUT request: This message cancels a Pending Discharge (in the future)
 - Seventh PUT request: This message updates Patient Information

**PUT responses**
 - First PUT response: HTTP 1/1 200 OK or any other HTTP Status Code 2xx. AortaMessageBroker will consider the message correctly treated and move to the next message.
 - Second PUT response: HTTP 1/1 400 Bad Request, with specific body (see below). AortaMessageBroker will then discard the message from the FIFO to that receiver.
 - All other PUT responses: AortaMessagebroker will keep repeating the same message (with configurable interval).

### Create a Patient Admission [POST]

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "PatientResidentAdmit",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A01",
                "HL7_ControlID": "00129020",
                "HL7_MessageTS": "20150217234826"
            },
            "ContactID": "1500215161",
            "Patient": {
                "PatientHospitalID": "1413053",
                "PatientLastName": "AchternaamA01",
                "PatientFirstName": "VoornaamA01",
                "PatientBirthDate": "20150217",
                "PatientGender": "F",
                "PatientLanguage": "FR",
                "PatientNN": "12345678901"
            },
            "PlanTime": "201502172256",
            "PlanTargetLocation": {
                "Campus": "001",
                "Ward": "2600",
                "Room": "114",
                "Bed": "01B"
            },
            "AmbulatoryStatus": ""
        }


+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "PatientAmbulantAdmit",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A04",
                "HL7_ControlID": "00129018",
                "HL7_MessageTS": "20150217234717"
            },
            "ContactID": "1500215150",
            "Patient": {
                "PatientHospitalID": "0122084",
                "PatientLastName": "AchternaamA04",
                "PatientFirstName": "VoornaamA04",
                "PatientBirthDate": "19770527",
                "PatientGender": "M",
                "PatientLanguage": "NL",
                "PatientNN": "01234567890"
            },
            "PlanTime": "201502172346",
            "PlanTargetLocation": {
                "Campus": "001",
                "Ward": "1500",
                "Room": "001",
                "Bed": "05"
            },
            "AmbulatoryStatus": ""
        }

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "PendingAdmit",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A14",
                "HL7_ControlID": "00973474",
                "HL7_MessageTS": "20160223122230"
            },
            "ContactID": "1600181682",
            "Patient": {
                "PatientHospitalID": "0059613",
                "PatientLastName": "Familienaam",
                "PatientFirstName": "Voornaam",
                "PatientBirthDate": "19460701",
                "PatientGender": "F",
                "PatientLanguage": "FR",
                "PatientNN": "46000138467"
            },
            "PlanTime": "201602231300",
            "PlanTargetLocation": {
                "Campus": "001",
                "Ward": "2101",
                "Room": "207",
                "Bed": "01"
            },
            "AmbulatoryStatus": ""
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/patients/123456/admissions/456789

+ Response 400 (application/json)

    + Headers

            Location: /api/patients/123456/admissions/456789

    + Body
    
            {
                "AortaMessageBrokerOutputResponse": "Rejected"
            }

### Update a patient admission [PUT]

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "PatientDischarge",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A03",
                "HL7_ControlID": "00128948",
                "HL7_MessageTS": "20150217194706"
            },
            "ContactID": "1500214656",
            "Patient": {
                "PatientHospitalID": "0193437",
                "PatientLastName": "AchternaamA03",
                "PatientFirstName": "VoornaamA03",
                "PatientBirthDate": "20090710",
                "PatientGender": "M",
                "PatientLanguage": "NL",
                "PatientNN": "67890123456"
            },
            "PlanTime": "201502171830",
            "PlanSourceLocation": {
                "Campus": "001",
                "Ward": "1500",
                "Room": "001",
                "Bed": "03"
            },
            "AmbulatoryStatus": ""
        }

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "PendingDischarge",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A16",
                "HL7_ControlID": "00974445",
                "HL7_MessageTS": "20160223161249"
            },
            "ContactID": "1600246351",
            "Patient": {
                "PatientHospitalID": "0084874",
                "PatientLastName": "FamilieNaam3",
                "PatientFirstName": "Voornaam3",
                "PatientBirthDate": "19500415",
                "PatientGender": "M",
                "PatientLanguage": "FR",
                "PatientNN": "50041504501"
            },
            "PlanTime": "201602232000",
            "PlanSourceLocation": {
                "Campus": "001",
                "Ward": "1500",
                "Room": "001",
                "Bed": "28"
            },
            "AmbulatoryStatus": ""
        }

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "CancelPatientAdmit",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A11",
                "HL7_ControlID": "00128824",
                "HL7_MessageTS": "20150217172900"
            },
            "ContactID": "1500214833",
            "Patient": {
                "PatientHospitalID": "0054098",
                "PatientLastName": "AchternaamA11",
                "PatientFirstName": "VoornaamA11",
                "PatientBirthDate": "19700703",
                "PatientGender": "M",
                "PatientLanguage": "NL",
                "PatientNN": "90123456789"
            },
            "PlanTime": "201502172346",
            "PlanTargetLocation": {
                "Campus": "001",
                "Ward": "1950",
                "Room": "001",
                "Bed": "397"
            },
            "AmbulatoryStatus": ""
        }

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "CancelPendingAdmit",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A27",
                "HL7_ControlID": "00973733",
                "HL7_MessageTS": "20160223133351"
            },
            "ContactID": "1600181682",
            "Patient": {
                "PatientHospitalID": "0059613",
                "PatientLastName": "Familienaam",
                "PatientFirstName": "Voornaam",
                "PatientBirthDate": "19460701",
                "PatientGender": "F",
                "PatientLanguage": "FR",
                "PatientNN": "46000138467"
            },
            "PlanTime": "201602231300",
            "PlanTargetLocation": {
                "Campus": "001",
                "Ward": "2101",
                "Room": "207",
                "Bed": "01"
            },
            "AmbulatoryStatus": ""
        }

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "CancelPatientDischarge",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A13",
                "HL7_ControlID": "00128379",
                "HL7_MessageTS": "20150217143714"
            },
            "ContactID": "1500128980",
            "Patient": {
                "PatientHospitalID": "0162344",
                "PatientLastName": "AchternaamA13",
                "PatientFirstName": "VoornaamA13",
                "PatientBirthDate": "19781007",
                "PatientGender": "F",
                "PatientLanguage": "NL",
                "PatientNN": "45678901234"
            },
            "PlanTime": "201501291915",
            "PlanSourceLocation": {
                "Campus": "001",
                "Ward": "3700",
                "Room": "165",
                "Bed": "01"
            },
            "AmbulatoryStatus": ""
        }

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "CancelPendingDischarge",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A25",
                "HL7_ControlID": "00974219",
                "HL7_MessageTS": "20160223150628"
            },
            "ContactID": "1600246351",
            "Patient": {
                "PatientHospitalID": "0177661",
                "PatientLastName": "Familienaam6",
                "PatientFirstName": "Voornaam6",
                "PatientBirthDate": "19330415",
                "PatientGender": "M",
                "PatientLanguage": "NL",
                "PatientNN": "33041536107"
            },
            "PlanTime": "201602232000",
            "PlanSourceLocation": {
                "Campus": "001",
                "Ward": "2101",
                "Room": "001",
                "Bed": "01"
            },
            "AmbulatoryStatus": ""
        }

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "UpdatePatientInfo",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A08",
                "HL7_ControlID": "00128300",
                "HL7_MessageTS": "20150217141407"
            },
            "ContactID": "1500212534",
            "Patient": {
                "PatientHospitalID": "0081668",
                "PatientLastName": "AchternaamA08",
                "PatientFirstName": "VoornaamA08",
                "PatientBirthDate": "19840725",
                "PatientGender": "F",
                "PatientLanguage": "NL",
                "PatientNN": "34567890123"
            },
            "PlanTime": "201502171319",
            "PlanLocation": {
                "Campus": "001",
                "Ward": "1500",
                "Room": "001",
                "Bed": "22"
            },
            "AmbulatoryStatus": ""
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/patients/123456/admissions/456789

+ Response 400 (application/json)

    + Headers

            Location: /api/patients/123456/admissions/456789

    + Body
    
            {
                "AortaMessageBrokerOutputResponse": "Rejected"
            }

## Patient Transfers Collection [/api/patients/123456/transfers]

Series of messages related to the transfer or movements of a patient.

**POST Requests**
 - First POST request: This message creates a Patient Transfer
 - Second POST request: This message creates a Pending Transfer (in the future)

**POST responses**
 - First POST response: HTTP 1/1 200 OK or any other HTTP Status Code 2xx. AortaMessageBroker will consider the message correctly treated and move to the next message.
 - Second POST response: HTTP 1/1 400 Bad Request, with specific body (see below). AortaMessageBroker will then discard the message from the FIFO to that receiver.
 - All other POST responses: AortaMessagebroker will keep repeating the same message (with configurable interval).

**PUT Requests**
 - First PUT request: This message cancels a Patient Transfer
 - Second PUT request: This message creates a Pending Transfer (in the future)

**PUT responses**
 - First PUT response: HTTP 1/1 200 OK or any other HTTP Status Code 2xx. AortaMessageBroker will consider the message correctly treated and move to the next message.
 - Second PUT response: HTTP 1/1 400 Bad Request, with specific body (see below). AortaMessageBroker will then discard the message from the FIFO to that receiver.
 - All other PUT responses: AortaMessagebroker will keep repeating the same message (with configurable interval).

### Create a Patient Transfer [POST]

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "PatientTransfer",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A02",
                "HL7_ControlID": "00128814",
                "HL7_MessageTS": "20150217172456"
            },
            "ContactID": "1500207693",
            "Patient": {
                "PatientHospitalID": "0054098",
                "PatientLastName": "AchternaamA02",
                "PatientFirstName": "VoornaamA02",
                "PatientBirthDate": "19570905",
                "PatientGender": "M",
                "PatientLanguage": "NL",
                "PatientNN": "89012345678"
            },
            "PlanTime": "201502161316",
            "PlanSourceLocation": {
                "Campus": "001",
                "Ward": "2202",
                "Room": "275",
                "Bed": "01"
            },
            "PlanTargetLocation": {
                "Campus": "001",
                "Ward": "2202",
                "Room": "282",
                "Bed": "02"
            },
            "AmbulatoryStatus": ""
        }

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "PendingTransfer",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A15",
                "HL7_ControlID": "00973895",
                "HL7_MessageTS": "20160223140451"
            },
            "ContactID": "1600246351",
            "Patient": {
                "PatientHospitalID": "0018382",
                "PatientLastName": "Familienaam2",
                "PatientFirstName": "Voornaam2",
                "PatientBirthDate": "19330702",
                "PatientGender": "M",
                "PatientLanguage": "NL",
                "PatientNN": "33070232368"
            },
            "PlanTime": "201602232000",
            "PlanSourceLocation": {
                "Campus": "001",
                "Ward": "1500",
                "Room": "001",
                "Bed": "28"
            },
            "PlanTargetLocation": {
                "Campus": "001",
                "Ward": "3002",
                "Room": "701",
                "Bed": "01"
            },
            "AmbulatoryStatus": ""
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/patients/123456/admissions/456789

+ Response 400 (application/json)

    + Headers

            Location: /api/patients/123456/admissions/456789

    + Body
    
            {
                "AortaMessageBrokerOutputResponse": "Rejected"
            }

### Update a Patient Transfer [PUT]

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "CancelPatientTransfer",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A12",
                "HL7_ControlID": "00128786",
                "HL7_MessageTS": "20150217171546"
            },
            "ContactID": "1500196401",
            "Patient": {
                "PatientHospitalID": "0012017",
                "PatientLastName": "AchternaamA12",
                "PatientFirstName": "VoornaamA12",
                "PatientBirthDate": "19630629",
                "PatientGender": "F",
                "PatientLanguage": "NL",
                "PatientNN": "78901234567"
            },
            "PlanTime": "201502160850",
            "PlanSourceLocation": {
                "Campus": "001",
                "Ward": "2201",
                "Room": "267",
                "Bed": "01"
            },
            "PlanTargetLocation": {
                "Campus": "001",
                "Ward": "2201",
                "Room": "259",
                "Bed": "02"
            },
            "AmbulatoryStatus": ""
        }

+ Request (application/json)

        {
            "MessageType": "OAZIS_HL7_ADT",
            "MessageDetail": "CancelPendingTransfer",
            "HL7_MSH": {
                "HL7_SendingApplication": "OAZIS",
                "HL7_MessageType": "ADT^A26",
                "HL7_ControlID": "00974219",
                "HL7_MessageTS": "20160223150628"
            },
            "ContactID": "1600246351",
            "Patient": {
                "PatientHospitalID": "0018382",
                "PatientLastName": "Familienaam2",
                "PatientFirstName": "Voornaam2",
                "PatientBirthDate": "19330702",
                "PatientGender": "M",
                "PatientLanguage": "NL",
                "PatientNN": "33070232368"
            },
            "PlanTime": "201602232000",
            "PlanSourceLocation": {
                "Campus": "001",
                "Ward": "1500",
                "Room": "001",
                "Bed": "28"
            },
            "PlanTargetLocation": {
                "Campus": "001",
                "Ward": "3002",
                "Room": "701",
                "Bed": "01"
            },
            "AmbulatoryStatus": ""
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/patients/123456/admissions/456789

+ Response 400 (application/json)

    + Headers

            Location: /api/patients/123456/admissions/456789

    + Body
    
            {
                "AortaMessageBrokerOutputResponse": "Rejected"
            }

## Hospital Structure Collection [/api/structure]

Explains the messages that are related to the hospital structure (bed, rooms, departments) within a hospital

### Update a Hospital Structure [PUT]

+ Response 201 (application/json)

## Stock Collection [/api/stocks]

Explains the messages that are related to stock movement requests within a hospital.

### Create a Stock Movement [POST]

+ Response 201 (application/json)

### Update a Stock Movement [PUT]

+ Response 201 (application/json)

## Patient Appointments Collection [/api/patients/123456/appointments]

Explains the messages that are related to appointment planning, at the moment or future appointments

### Create an Appointment [POST]

+ Response 201 (application/json)

### Delete an Appointment [DELETE]

+ Response 201 (application/json)

### Update an Appointment [PUT]

+ Response 201 (application/json)